/*
 * Copyright (C) 2012 Freescale Semiconductor, Inc.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 * MA 02111-1307 USA
 */

#include <config.h>
#include <asm/arch/mx6.h>

#ifdef	CONFIG_FLASH_HEADER
#ifndef CONFIG_FLASH_HEADER_OFFSET
# error "Must define the offset of flash header"
#endif

#define CPU_2_BE_32(l) \
       ((((l) & 0x000000FF) << 24) | \
	(((l) & 0x0000FF00) << 8)  | \
	(((l) & 0x00FF0000) >> 8)  | \
	(((l) & 0xFF000000) >> 24))

#define MXC_DCD_ITEM(i, addr, val)   \
dcd_node_##i:                        \
        .word CPU_2_BE_32(addr) ;     \
        .word CPU_2_BE_32(val)  ;     \

.section ".text.flasheader", "x"
	b	_start
	.org	CONFIG_FLASH_HEADER_OFFSET

ivt_header:       .word 0x402000D1 /* Tag=0xD1, Len=0x0020, Ver=0x40 */
app_code_jump_v:  .word _start
reserv1:          .word 0x0
dcd_ptr:          .word dcd_hdr
boot_data_ptr:	  .word boot_data
self_ptr:         .word ivt_header
#ifdef CONFIG_SECURE_BOOT
app_code_csf:     .word __hab_data
#else
app_code_csf:     .word 0x0
#endif
reserv2:          .word 0x0

boot_data:        .word TEXT_BASE
#ifdef CONFIG_SECURE_BOOT
image_len:        .word __hab_data_end - TEXT_BASE + CONFIG_FLASH_HEADER_OFFSET
#else
image_len:        .word _end_of_copy  - TEXT_BASE + CONFIG_FLASH_HEADER_OFFSET
#endif
plugin:           .word 0x0

#if defined CONFIG_MX6DL_DDR3
#if defined CONFIG_DDR_32BIT
dcd_hdr:          .word 0x40E001D2 /* Tag=0xD2, Len=59*8 + 4 + 4, Ver=0x40 */
write_dcd_cmd:    .word 0x04DC01CC /* Tag=0xCC, Len=59*8 + 4, Param=0x04 */

MXC_DCD_ITEM(1, IOMUXC_BASE_ADDR + 0x774, 0x000C0000)
MXC_DCD_ITEM(2, IOMUXC_BASE_ADDR + 0x754, 0x00000000)

MXC_DCD_ITEM(3, IOMUXC_BASE_ADDR + 0x4ac, 0x00000030)
MXC_DCD_ITEM(4, IOMUXC_BASE_ADDR + 0x4b0, 0x00000030)

MXC_DCD_ITEM(5, IOMUXC_BASE_ADDR + 0x464, 0x00000030)
MXC_DCD_ITEM(6, IOMUXC_BASE_ADDR + 0x490, 0x00000030)
MXC_DCD_ITEM(7, IOMUXC_BASE_ADDR + 0x74c, 0x00000030)

MXC_DCD_ITEM(8, IOMUXC_BASE_ADDR + 0x494, 0x00000030)

MXC_DCD_ITEM(9, IOMUXC_BASE_ADDR + 0x4a0, 0x00000000)

MXC_DCD_ITEM(10, IOMUXC_BASE_ADDR + 0x4b4, 0x00000030)
MXC_DCD_ITEM(11, IOMUXC_BASE_ADDR + 0x4b8, 0x00000030)
MXC_DCD_ITEM(12, IOMUXC_BASE_ADDR + 0x76c, 0x00000030)

MXC_DCD_ITEM(13, IOMUXC_BASE_ADDR + 0x750, 0x00020000)

MXC_DCD_ITEM(14, IOMUXC_BASE_ADDR + 0x4bc, 0x00000030)
MXC_DCD_ITEM(15, IOMUXC_BASE_ADDR + 0x4c0, 0x00000030)
MXC_DCD_ITEM(16, IOMUXC_BASE_ADDR + 0x4c4, 0x00000030)
MXC_DCD_ITEM(17, IOMUXC_BASE_ADDR + 0x4c8, 0x00000030)

MXC_DCD_ITEM(18, IOMUXC_BASE_ADDR + 0x760, 0x00020000)

MXC_DCD_ITEM(19, IOMUXC_BASE_ADDR + 0x764, 0x00000030)
MXC_DCD_ITEM(20, IOMUXC_BASE_ADDR + 0x770, 0x00000030)
MXC_DCD_ITEM(21, IOMUXC_BASE_ADDR + 0x778, 0x00000030)
MXC_DCD_ITEM(22, IOMUXC_BASE_ADDR + 0x77c, 0x00000030)

MXC_DCD_ITEM(23, IOMUXC_BASE_ADDR + 0x470, 0x00000030)
MXC_DCD_ITEM(24, IOMUXC_BASE_ADDR + 0x474, 0x00000030)
MXC_DCD_ITEM(25, IOMUXC_BASE_ADDR + 0x478, 0x00000030)
MXC_DCD_ITEM(26, IOMUXC_BASE_ADDR + 0x47c, 0x00000030)

MXC_DCD_ITEM(27, MMDC_P0_BASE_ADDR + 0x800, 0xA1390003)

MXC_DCD_ITEM(28, MMDC_P0_BASE_ADDR + 0x80c, 0x001F001F)
MXC_DCD_ITEM(29, MMDC_P0_BASE_ADDR + 0x810, 0x001F001F)

MXC_DCD_ITEM(30, MMDC_P0_BASE_ADDR + 0x83c, 0x42190219)
MXC_DCD_ITEM(31, MMDC_P0_BASE_ADDR + 0x840, 0x017B0177)
MXC_DCD_ITEM(32, MMDC_P0_BASE_ADDR + 0x848, 0x4B4D4E4D)
MXC_DCD_ITEM(33, MMDC_P0_BASE_ADDR + 0x850, 0x3F3E2D36)

MXC_DCD_ITEM(34, MMDC_P0_BASE_ADDR + 0x81c, 0x33333333)
MXC_DCD_ITEM(35, MMDC_P0_BASE_ADDR + 0x820, 0x33333333)
MXC_DCD_ITEM(36, MMDC_P0_BASE_ADDR + 0x824, 0x33333333)
MXC_DCD_ITEM(37, MMDC_P0_BASE_ADDR + 0x828, 0x33333333)

MXC_DCD_ITEM(38, MMDC_P0_BASE_ADDR + 0x8b8, 0x00000800)

MXC_DCD_ITEM(39, MMDC_P0_BASE_ADDR + 0x004, 0x0002002D)
MXC_DCD_ITEM(40, MMDC_P0_BASE_ADDR + 0x008, 0x00333030)
MXC_DCD_ITEM(41, MMDC_P0_BASE_ADDR + 0x00c, 0x3F435313)
MXC_DCD_ITEM(42, MMDC_P0_BASE_ADDR + 0x010, 0xB66E8B63)
MXC_DCD_ITEM(43, MMDC_P0_BASE_ADDR + 0x014, 0x01FF00DB)
MXC_DCD_ITEM(44, MMDC_P0_BASE_ADDR + 0x018, 0x00001740)

MXC_DCD_ITEM(45, MMDC_P0_BASE_ADDR + 0x01c, 0x00008000)
MXC_DCD_ITEM(46, MMDC_P0_BASE_ADDR + 0x02c, 0x000026d2)

MXC_DCD_ITEM(47, MMDC_P0_BASE_ADDR + 0x030, 0x00431023)
MXC_DCD_ITEM(48, MMDC_P0_BASE_ADDR + 0x040, 0x00000017)

MXC_DCD_ITEM(49, MMDC_P0_BASE_ADDR + 0x000, 0x83190000)

MXC_DCD_ITEM(50, MMDC_P0_BASE_ADDR + 0x01c, 0x04008032)
MXC_DCD_ITEM(51, MMDC_P0_BASE_ADDR + 0x01c, 0x00008033)
MXC_DCD_ITEM(52, MMDC_P0_BASE_ADDR + 0x01c, 0x00048031)
MXC_DCD_ITEM(53, MMDC_P0_BASE_ADDR + 0x01c, 0x05208030)
MXC_DCD_ITEM(54, MMDC_P0_BASE_ADDR + 0x01c, 0x04008040)

MXC_DCD_ITEM(55, MMDC_P0_BASE_ADDR + 0x020, 0x00005800)
MXC_DCD_ITEM(56, MMDC_P0_BASE_ADDR + 0x818, 0x00011117)

MXC_DCD_ITEM(57, MMDC_P0_BASE_ADDR + 0x004, 0x0002556d)
MXC_DCD_ITEM(58, MMDC_P0_BASE_ADDR + 0x404, 0x00011006)

MXC_DCD_ITEM(59, MMDC_P0_BASE_ADDR + 0x01c, 0x00000000)
#else /* i.MX6DL 64BIT-DDR */
dcd_hdr:          .word 0x40A002D2 /* Tag=0xD2, Len=83*8 + 4 + 4, Ver=0x40 */
write_dcd_cmd:    .word 0x049C02CC /* Tag=0xCC, Len=83*8 + 4, Param=0x04 */

# IOMUXC_BASE_ADDR  = 0x20e0000
# DDR IO TYPE
MXC_DCD_ITEM(1, IOMUXC_BASE_ADDR + 0x774, 0x000c0000)
MXC_DCD_ITEM(2, IOMUXC_BASE_ADDR + 0x754, 0x00000000)
# Clock
MXC_DCD_ITEM(3, IOMUXC_BASE_ADDR + 0x4ac, 0x00000030)
MXC_DCD_ITEM(4, IOMUXC_BASE_ADDR + 0x4b0, 0x00000030)
# Address
MXC_DCD_ITEM(5, IOMUXC_BASE_ADDR + 0x464, 0x00000030)
MXC_DCD_ITEM(6, IOMUXC_BASE_ADDR + 0x490, 0x00000030)
MXC_DCD_ITEM(7, IOMUXC_BASE_ADDR + 0x74c, 0x00000030)
# Control
MXC_DCD_ITEM(8, IOMUXC_BASE_ADDR + 0x494, 0x00000030)

MXC_DCD_ITEM(9, IOMUXC_BASE_ADDR + 0x4a0, 0x00000000)

MXC_DCD_ITEM(10, IOMUXC_BASE_ADDR + 0x4b4, 0x00000030)
MXC_DCD_ITEM(11, IOMUXC_BASE_ADDR + 0x4b8, 0x00000030)
MXC_DCD_ITEM(12, IOMUXC_BASE_ADDR + 0x76c, 0x00000030)
# Data Strobe
MXC_DCD_ITEM(13, IOMUXC_BASE_ADDR + 0x750, 0x00020000)

MXC_DCD_ITEM(14, IOMUXC_BASE_ADDR + 0x4bc, 0x00000030)
MXC_DCD_ITEM(15, IOMUXC_BASE_ADDR + 0x4c0, 0x00000030)
MXC_DCD_ITEM(16, IOMUXC_BASE_ADDR + 0x4c4, 0x00000030)
MXC_DCD_ITEM(17, IOMUXC_BASE_ADDR + 0x4c8, 0x00000030)
MXC_DCD_ITEM(18, IOMUXC_BASE_ADDR + 0x4cc, 0x00000030)
MXC_DCD_ITEM(19, IOMUXC_BASE_ADDR + 0x4d0, 0x00000030)
MXC_DCD_ITEM(20, IOMUXC_BASE_ADDR + 0x4d4, 0x00000030)
MXC_DCD_ITEM(21, IOMUXC_BASE_ADDR + 0x4d8, 0x00000030)

MXC_DCD_ITEM(22, IOMUXC_BASE_ADDR + 0x760, 0x00020000)

MXC_DCD_ITEM(23, IOMUXC_BASE_ADDR + 0x764, 0x00000030)
MXC_DCD_ITEM(24, IOMUXC_BASE_ADDR + 0x770, 0x00000030)
MXC_DCD_ITEM(25, IOMUXC_BASE_ADDR + 0x778, 0x00000030)
MXC_DCD_ITEM(26, IOMUXC_BASE_ADDR + 0x77c, 0x00000030)
MXC_DCD_ITEM(27, IOMUXC_BASE_ADDR + 0x780, 0x00000030)
MXC_DCD_ITEM(28, IOMUXC_BASE_ADDR + 0x784, 0x00000030)
MXC_DCD_ITEM(29, IOMUXC_BASE_ADDR + 0x78c, 0x00000030)
MXC_DCD_ITEM(30, IOMUXC_BASE_ADDR + 0x748, 0x00000030)

MXC_DCD_ITEM(31, IOMUXC_BASE_ADDR + 0x470, 0x00000030)
MXC_DCD_ITEM(32, IOMUXC_BASE_ADDR + 0x474, 0x00000030)
MXC_DCD_ITEM(33, IOMUXC_BASE_ADDR + 0x478, 0x00000030)
MXC_DCD_ITEM(34, IOMUXC_BASE_ADDR + 0x47c, 0x00000030)
MXC_DCD_ITEM(35, IOMUXC_BASE_ADDR + 0x480, 0x00000030)
MXC_DCD_ITEM(36, IOMUXC_BASE_ADDR + 0x484, 0x00000030)
MXC_DCD_ITEM(37, IOMUXC_BASE_ADDR + 0x488, 0x00000030)
MXC_DCD_ITEM(38, IOMUXC_BASE_ADDR + 0x48c, 0x00000030)

# MMDC_P0_BASE_ADDR = 0x021b0000
# MMDC_P1_BASE_ADDR = 0x021b4000
# Calibrations
# ZQ
MXC_DCD_ITEM(39, MMDC_P0_BASE_ADDR + 0x800, 0xa1390003)

# write leveling
MXC_DCD_ITEM(40, MMDC_P0_BASE_ADDR + 0x80c, 0x001F001F)
MXC_DCD_ITEM(41, MMDC_P0_BASE_ADDR + 0x810, 0x001F001F)
MXC_DCD_ITEM(42, MMDC_P1_BASE_ADDR + 0x80c, 0x001F001F)
MXC_DCD_ITEM(43, MMDC_P1_BASE_ADDR + 0x810, 0x001F001F)
# DQS gating, read delay, write delay calibration values
# based on calibration compare of 0x00ffff00
MXC_DCD_ITEM(44, MMDC_P0_BASE_ADDR + 0x83c, 0x42480248)
MXC_DCD_ITEM(45, MMDC_P0_BASE_ADDR + 0x840, 0x0211020B)
MXC_DCD_ITEM(46, MMDC_P1_BASE_ADDR + 0x83C, 0x417F0211)
MXC_DCD_ITEM(47, MMDC_P1_BASE_ADDR + 0x840, 0x015D0166)

MXC_DCD_ITEM(48, MMDC_P0_BASE_ADDR + 0x848, 0x4B4C504D)
MXC_DCD_ITEM(49, MMDC_P1_BASE_ADDR + 0x848, 0x494C4F48)

MXC_DCD_ITEM(50, MMDC_P0_BASE_ADDR + 0x850, 0x3F3F2E31)
MXC_DCD_ITEM(51, MMDC_P1_BASE_ADDR + 0x850, 0x2B35382B)

MXC_DCD_ITEM(52, MMDC_P0_BASE_ADDR + 0x81c, 0x33333333)
MXC_DCD_ITEM(53, MMDC_P0_BASE_ADDR + 0x820, 0x33333333)
MXC_DCD_ITEM(54, MMDC_P0_BASE_ADDR + 0x824, 0x33333333)
MXC_DCD_ITEM(55, MMDC_P0_BASE_ADDR + 0x828, 0x33333333)
MXC_DCD_ITEM(56, MMDC_P1_BASE_ADDR + 0x81c, 0x33333333)
MXC_DCD_ITEM(57, MMDC_P1_BASE_ADDR + 0x820, 0x33333333)
MXC_DCD_ITEM(58, MMDC_P1_BASE_ADDR + 0x824, 0x33333333)
MXC_DCD_ITEM(59, MMDC_P1_BASE_ADDR + 0x828, 0x33333333)

MXC_DCD_ITEM(60, MMDC_P0_BASE_ADDR + 0x8b8, 0x00000800)
MXC_DCD_ITEM(61, MMDC_P1_BASE_ADDR + 0x8b8, 0x00000800)
# MMDC init:
# in DDR3, 64-bit mode, only MMDC0 is initiated:
MXC_DCD_ITEM(62, MMDC_P0_BASE_ADDR + 0x004, 0x0002002D)
MXC_DCD_ITEM(63, MMDC_P0_BASE_ADDR + 0x008, 0x00333030)
MXC_DCD_ITEM(64, MMDC_P0_BASE_ADDR + 0x00c, 0x3F435313)
MXC_DCD_ITEM(65, MMDC_P0_BASE_ADDR + 0x010, 0xB66E8B63)
MXC_DCD_ITEM(66, MMDC_P0_BASE_ADDR + 0x014, 0x01FF00DB)
MXC_DCD_ITEM(67, MMDC_P0_BASE_ADDR + 0x018, 0x00081740)

MXC_DCD_ITEM(68, MMDC_P0_BASE_ADDR + 0x01c, 0x00008000)
MXC_DCD_ITEM(69, MMDC_P0_BASE_ADDR + 0x02c, 0x000026d2)
MXC_DCD_ITEM(70, MMDC_P0_BASE_ADDR + 0x030, 0x00431023)
MXC_DCD_ITEM(71, MMDC_P0_BASE_ADDR + 0x040, 0x00000027)

MXC_DCD_ITEM(72, MMDC_P0_BASE_ADDR + 0x000, 0x831A0000)

# Initialize 2GB DDR3 - Micron MT41J128M
MXC_DCD_ITEM(73, MMDC_P0_BASE_ADDR + 0x01c, 0x04008032)
MXC_DCD_ITEM(74, MMDC_P0_BASE_ADDR + 0x01c, 0x00008033)
MXC_DCD_ITEM(75, MMDC_P0_BASE_ADDR + 0x01c, 0x00048031)
MXC_DCD_ITEM(76, MMDC_P0_BASE_ADDR + 0x01c, 0x05208030)
MXC_DCD_ITEM(77, MMDC_P0_BASE_ADDR + 0x01c, 0x04008040)

MXC_DCD_ITEM(78, MMDC_P0_BASE_ADDR + 0x020, 0x00005800)

MXC_DCD_ITEM(79, MMDC_P0_BASE_ADDR + 0x818, 0x00011117)
MXC_DCD_ITEM(80, MMDC_P1_BASE_ADDR + 0x818, 0x00011117)

MXC_DCD_ITEM(81, MMDC_P0_BASE_ADDR + 0x004, 0x0002556d)
MXC_DCD_ITEM(82, MMDC_P1_BASE_ADDR + 0x404, 0x00011006)
MXC_DCD_ITEM(83, MMDC_P0_BASE_ADDR + 0x01c, 0x00000000)
#endif
#elif defined CONFIG_MX6DL_LPDDR2

dcd_hdr:          .word 0x40F003D2 /* Tag=0xD2, Len=125*8 + 4 + 4, Ver=0x40 */
write_dcd_cmd:    .word 0x04EC03CC /* Tag=0xCC, Len=125*8 + 4, Param=0x04 */

/* 2 Channel LPDDR2 can be enabled in boot mode. Please refer to reference manual section 2.3 */
/* IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0:  ODT disabled; 48 ohm drive strength */
MXC_DCD_ITEM(1, IOMUXC_BASE_ADDR + 0x470, 0x00000028)
/* IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1 */
MXC_DCD_ITEM(2, IOMUXC_BASE_ADDR + 0x474, 0x00000028)
/* IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2 */
MXC_DCD_ITEM(3, IOMUXC_BASE_ADDR + 0x478, 0x00000028)
/* IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3 */
MXC_DCD_ITEM(4, IOMUXC_BASE_ADDR + 0x47c, 0x00000028)
/* IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4 */
MXC_DCD_ITEM(5, IOMUXC_BASE_ADDR + 0x480, 0x00000028)
/* IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5 */
MXC_DCD_ITEM(6, IOMUXC_BASE_ADDR + 0x484, 0x00000028)
/* IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6 */
MXC_DCD_ITEM(7, IOMUXC_BASE_ADDR + 0x488, 0x00000028)
/* IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7 */
MXC_DCD_ITEM(8, IOMUXC_BASE_ADDR + 0x48c, 0x00000028)
/* IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS:   ODT disabled; 48 ohm DS (LPDDR2 CA5_P0) */
MXC_DCD_ITEM(9, IOMUXC_BASE_ADDR + 0x464, 0x00000028)
/* IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS:   ODT disabled; 48 ohm DS (LPDDR2 CS1_P0) */
MXC_DCD_ITEM(10, IOMUXC_BASE_ADDR + 0x490, 0x00000028)
/* IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET: DDR_SEL - LPDDR2 */
MXC_DCD_ITEM(11, IOMUXC_BASE_ADDR + 0x494, 0x00000028)
/* IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2: pull/ODT disabled (LPDDR2 CA6_P1) */
MXC_DCD_ITEM(12, IOMUXC_BASE_ADDR + 0x4a0, 0x00000000)
/* IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0: pull/ODT disabled (LPDDR2 CA9_P1) */
MXC_DCD_ITEM(13, IOMUXC_BASE_ADDR + 0x4a4, 0x00000028)
/* IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1: pull/ODT disabled (LPDDR2 CA8_P1) */
MXC_DCD_ITEM(14, IOMUXC_BASE_ADDR + 0x4a8, 0x00000028)
/* IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0: pull/ODT disabled; 34 ohm drive strength */
MXC_DCD_ITEM(15, IOMUXC_BASE_ADDR + 0x4ac, 0x00000030)
/* IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1: pull/ODT disabled; 34 ohm drive strength */
MXC_DCD_ITEM(16, IOMUXC_BASE_ADDR + 0x4b0, 0x00000030)
/* IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0:  pull/ODT disabled; 48 ohm DS (LPDDR2 CA3_P0) */
MXC_DCD_ITEM(17, IOMUXC_BASE_ADDR + 0x4b4, 0x00000028)
/* IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1:  pull/ODT disabled; 48 ohm DS (LPDDR2 CA0_P0) */
MXC_DCD_ITEM(18, IOMUXC_BASE_ADDR + 0x4b8, 0x00000028)
/* IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0: 100k pull down; 48 ohm drive strength */
MXC_DCD_ITEM(19, IOMUXC_BASE_ADDR + 0x4bc, 0x00003028)
/* IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1 */
MXC_DCD_ITEM(20, IOMUXC_BASE_ADDR + 0x4c0, 0x00003028)
/* IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2 */
MXC_DCD_ITEM(21, IOMUXC_BASE_ADDR + 0x4c4, 0x00003028)
/* IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3 */
MXC_DCD_ITEM(22, IOMUXC_BASE_ADDR + 0x4c8, 0x00003028)
/* IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4 */
MXC_DCD_ITEM(23, IOMUXC_BASE_ADDR + 0x4cc, 0x00003028)
/* IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5 */
MXC_DCD_ITEM(24, IOMUXC_BASE_ADDR + 0x4d0, 0x00003028)
/* IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6 */
MXC_DCD_ITEM(25, IOMUXC_BASE_ADDR + 0x4d4, 0x00003028)
/* IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7 */
MXC_DCD_ITEM(26, IOMUXC_BASE_ADDR + 0x4d8, 0x00003028)
/* IOMUXC_SW_PAD_CTL_GRP_B0DS: 48-ohm DS for DQ */
MXC_DCD_ITEM(27, IOMUXC_BASE_ADDR + 0x764, 0x00000028)
/* IOMUXC_SW_PAD_CTL_GRP_B1DS */
MXC_DCD_ITEM(28, IOMUXC_BASE_ADDR + 0x770, 0x00000028)
/* IOMUXC_SW_PAD_CTL_GRP_B2DS */
MXC_DCD_ITEM(29, IOMUXC_BASE_ADDR + 0x778, 0x00000028)
/* IOMUXC_SW_PAD_CTL_GRP_B3DS */
MXC_DCD_ITEM(30, IOMUXC_BASE_ADDR + 0x77c, 0x00000028)
/* IOMUXC_SW_PAD_CTL_GRP_B4DS */
MXC_DCD_ITEM(31, IOMUXC_BASE_ADDR + 0x780, 0x00000028)
/* IOMUXC_SW_PAD_CTL_GRP_B5DS */
MXC_DCD_ITEM(32, IOMUXC_BASE_ADDR + 0x784, 0x00000028)
/* IOMUXC_SW_PAD_CTL_GRP_B6DS */
MXC_DCD_ITEM(33, IOMUXC_BASE_ADDR + 0x78c, 0x00000028)
/* IOMUXC_SW_PAD_CTL_GRP_B7DS */
MXC_DCD_ITEM(34, IOMUXC_BASE_ADDR + 0x748, 0x00000028)
/* IOMUXC_SW_PAD_CTL_GRP_ADDDS: 48-ohm DS for ADDR,SDBA0,SDBA1 */
MXC_DCD_ITEM(35, IOMUXC_BASE_ADDR + 0x74c, 0x00000028)
/* IOMUXC_SW_PAD_CTL_GRP_CTLDS: 48-ohm DS for CS0,CS1,SDBA2,SDCKE0,SDCKE1,SDWE */
MXC_DCD_ITEM(36, IOMUXC_BASE_ADDR + 0x76c, 0x00000028)
/* IOMUXC_SW_PAD_CTL_GRP_DDRMODE_CTL: Differential input for DQS */
MXC_DCD_ITEM(37, IOMUXC_BASE_ADDR + 0x750, 0x00020000)
/* IOMUXC_SW_PAD_CTL_GRP_DDRPKE: Pull/Keeper Disabled for CA,DATA,CS,CLK */
MXC_DCD_ITEM(38, IOMUXC_BASE_ADDR + 0x754, 0x00000000)
/* IOMUXC_SW_PAD_CTL_GRP_DDRHYS: Schmitt trigger input for DATA and DQS */
MXC_DCD_ITEM(39, IOMUXC_BASE_ADDR + 0x75c, 0x00010000)
/* IOMUXC_SW_PAD_CTL_GRP_DDRMODE: Differential input DATA */
MXC_DCD_ITEM(40, IOMUXC_BASE_ADDR + 0x760, 0x00020000)
/* IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE: DDR_TYPE=LPDDR2 */
MXC_DCD_ITEM(41, IOMUXC_BASE_ADDR + 0x774, 0x00080000)
/*
 * DDR Controller Registers
 *
 * Manufacturer:	Micron
 * Device Part Number:	MT42L128M64D2KH-25
 * Clock Freq.: 	400MHz
 * MMDC channels: Both MMDC0, MMDC1
 *Density per CS in Gb: 	4Gb
 * Chip Selects used:	2
 * Number of Banks:	8
 * Row address:    	14
 * Column address: 	10
 * Data bus width	32 x 2
 */
/* MMDC1_MDSCR, set the Configuration Request bit during MMDC set up */
MXC_DCD_ITEM(42, MMDC_P0_BASE_ADDR + 0x01c, 0x00008000)
/* MMDC2_MDSCR, set the Configuration Request bit during MMDC set up */
MXC_DCD_ITEM(43, MMDC_P1_BASE_ADDR + 0x01c, 0x00008000)
/* LPDDR2 ZQ params */
MXC_DCD_ITEM(44, MMDC_P0_BASE_ADDR + 0x85c, 0x1b5f01ff)
/* ZQCS=112 cycles, ZQCL=192 cycles, ZQINIT=1024 cycles */
MXC_DCD_ITEM(45, MMDC_P1_BASE_ADDR + 0x85c, 0x1b5f01ff)
# Calibration setup.
/* MMDC1_MPZQHWCTRL, enable one time ZQ calibration */
MXC_DCD_ITEM(46, MMDC_P0_BASE_ADDR + 0x800, 0xa1390000)
/* MMDC2_MPZQHWCTRL, enable one time ZQ calibration */
MXC_DCD_ITEM(47, MMDC_P1_BASE_ADDR + 0x800, 0xa1390000)
/* MMDC1_MPPDCMPR2: CA_DL_ABS_OFFSET=64 (quarter cycle) */
MXC_DCD_ITEM(48, MMDC_P0_BASE_ADDR + 0x890, 0x00400000)
/* MMDC2_MPPDCMPR2: CA_DL_ABS_OFFSET=64 (quarter cycle) */
MXC_DCD_ITEM(49, MMDC_P1_BASE_ADDR + 0x890, 0x00400000)
/* MMDC1_MPWRCADL: NO change in CA delay */
MXC_DCD_ITEM(50, MMDC_P0_BASE_ADDR + 0x8bc, 0x00000000)
/* MMDC2_MPWRCADL: NO change in CA delay */
MXC_DCD_ITEM(51, MMDC_P1_BASE_ADDR + 0x8bc, 0x00000000)
/* MMDC1_MPMUR0: FRC_MSR=1, force measurement on delay-lines in no of delay units */
MXC_DCD_ITEM(52, MMDC_P0_BASE_ADDR + 0x8b8, 0x00000800)
/* MMDC2_MPMUR0: FRC_MSR=1, force measurement on delay-lines in no of delay units */
MXC_DCD_ITEM(53, MMDC_P1_BASE_ADDR + 0x8b8, 0x00000800)
/* MMDC1_MPREDQBY0DL3: add 3 delay units on all DQ and DM */
MXC_DCD_ITEM(54, MMDC_P0_BASE_ADDR + 0x81c, 0x33333333)
/* MMDC1_MPREDQBY1DL3 */
MXC_DCD_ITEM(55, MMDC_P0_BASE_ADDR + 0x820, 0x33333333)
/* MMDC1_MPREDQBY2DL3 */
MXC_DCD_ITEM(56, MMDC_P0_BASE_ADDR + 0x824, 0x33333333)
/* MMDC1_MPREDQBY3DL3 */
MXC_DCD_ITEM(57, MMDC_P0_BASE_ADDR + 0x828, 0x33333333)
/* MMDC2_MPREDQBY0DL3: add 3 delay units on all DQ and DM */
MXC_DCD_ITEM(58, MMDC_P1_BASE_ADDR + 0x81c, 0x33333333)
/* MMDC2_MPREDQBY1DL3 */
MXC_DCD_ITEM(59, MMDC_P1_BASE_ADDR + 0x820, 0x33333333)
/* MMDC2_MPREDQBY2DL3 */
MXC_DCD_ITEM(60, MMDC_P1_BASE_ADDR + 0x824, 0x33333333)
/* MMDC2_MPREDQBY3DL3 */
MXC_DCD_ITEM(61, MMDC_P1_BASE_ADDR + 0x828, 0x33333333)
/* MMDC1_MPWRDQBY0DL3: add 3 delay units on all DQ */
MXC_DCD_ITEM(62, MMDC_P0_BASE_ADDR + 0x82c, 0xf3333333)
/* MMDC1_MPWRDQBY1DL3 */
MXC_DCD_ITEM(63, MMDC_P0_BASE_ADDR + 0x830, 0xf3333333)
/* MMDC1_MPWRDQBY2DL3 */
MXC_DCD_ITEM(64, MMDC_P0_BASE_ADDR + 0x834, 0xf3333333)
/* MMDC1_MPWRDQBY3DL3 */
MXC_DCD_ITEM(65, MMDC_P0_BASE_ADDR + 0x838, 0xf3333333)
/* MMDC2_MPWRDQBY0DL3: add 3 delay units on all DQ and DM */
MXC_DCD_ITEM(66, MMDC_P1_BASE_ADDR + 0x82c, 0xf3333333)
/* MMDC2_MPWRDQBY1DL3 */
MXC_DCD_ITEM(67, MMDC_P1_BASE_ADDR + 0x830, 0xf3333333)
/* MMDC2_MPWRDQBY2DL3 */
MXC_DCD_ITEM(68, MMDC_P1_BASE_ADDR + 0x834, 0xf3333333)
/* MMDC2_MPWRDQBY3DL3 */
MXC_DCD_ITEM(69, MMDC_P1_BASE_ADDR + 0x838, 0xf3333333)
/*
 * Read and write data delay, per byte. 
 * For optimized DDR operation it is recommended to run mmdc_calibration on your board, and replace 4 delay register assigns with resulted values 
 * Note:
 * a. DQS gating is not relevant for LPDDR2. DSQ gating calibration section should be skipped, or the write/read calibration comming after that will stall
 * b. The calibration code that runs for both MMDC0 & MMDC1 should be used.
 *
 *it is strongly recommended to run calibration on your board, and replace bellow values:
*/
/* MMDC1_MPRDDLCTL: RD_DL_ABS_OFFSET */
MXC_DCD_ITEM(70, MMDC_P0_BASE_ADDR + 0x848, 0x4A4B514F)
/* MMDC2_MPRDDLCTL */
MXC_DCD_ITEM(71, MMDC_P1_BASE_ADDR + 0x848, 0x50524C4A)
/* MMDC1_MPWRDLCTL: WR_DL_ABS_OFFSET */
MXC_DCD_ITEM(72, MMDC_P0_BASE_ADDR + 0x850, 0x3F2C2B2B)
/* MMDC2_MPWRDLCTL */
MXC_DCD_ITEM(73, MMDC_P1_BASE_ADDR + 0x850, 0x292D312A)
/* MMDC1_MPDGCTRL0: disable DQS gating */
MXC_DCD_ITEM(74, MMDC_P0_BASE_ADDR + 0x83c, 0x20000000)
/* MMDC2_MPDGCTRL0: disable DQS gating */
MXC_DCD_ITEM(75, MMDC_P1_BASE_ADDR + 0x83c, 0x20000000)
/* MMDC1_MPSDCTRL:  No change in DDR clock delay */
MXC_DCD_ITEM(76, MMDC_P0_BASE_ADDR + 0x858, 0x00000000)
/* MMDC2_MPSDCTRL */
MXC_DCD_ITEM(77, MMDC_P1_BASE_ADDR + 0x858, 0x00000000)
/* MMDC1_MPMUR0: FRC_MSR=1, force measurement on delay-lines in no of delay units */
MXC_DCD_ITEM(78, MMDC_P0_BASE_ADDR + 0x8b8, 0x00000800)
/* MMDC2_MPMUR0: FRC_MSR=1, force measurement on delay-lines in no of delay units */
MXC_DCD_ITEM(79, MMDC_P1_BASE_ADDR + 0x8b8, 0x00000800)
# Calibration setup end
/* Channel0 - startng address 0x80000000 */
/* MMDC1_MDCFG0: tRFC=52,tXS=56,tXP=3,tXPDLL=1,tFAW=21,tCL=3 */
MXC_DCD_ITEM(80, MMDC_P0_BASE_ADDR + 0x00c, 0x34386143)
/* MMDC1_MDPDC:  tPRCT_1=0,tPRCT0=0,tCKE=3cycles,PWDT_1=0,PWDT_0=0,tCKSRX=4cycles,tCKSRE=4cycles */
MXC_DCD_ITEM(81, MMDC_P0_BASE_ADDR + 0x004, 0x00020024)
/* MMDC1_MDCFG1: tRCD=n/a,tRP=n/a,tRC=n/a,tRAS=17cycles,tRPS=n/a,tWR=6cycles,tMRD=5cycles,tCWL=4cycles */
MXC_DCD_ITEM(82, MMDC_P0_BASE_ADDR + 0x010, 0x00100a82)
/* MMDC1_MDCFG2: tDLLK=n/a,tRTP=3cycles,tWTR=3cycles,tRRD=4cycles */
MXC_DCD_ITEM(83, MMDC_P0_BASE_ADDR + 0x014, 0x00000093)
/* MMDC1_MDMISC: BI_ON=1,LPDDR2-S4,MIF3_MODE=3,RALAT=3cycles,8-banks, */
MXC_DCD_ITEM(84, MMDC_P0_BASE_ADDR + 0x018, 0x000016cc)
/* MMDC1_MDRWD:  Device auto init period=4000cycles */
MXC_DCD_ITEM(85, MMDC_P0_BASE_ADDR + 0x02c, 0x0f9f26d2)
/* MMDC1_MDOR:   tXPR=n/a,SDE_to_RST=n/a,RST_to_CKE=14cycles */
MXC_DCD_ITEM(86, MMDC_P0_BASE_ADDR + 0x030, 0x00000210)
/* MMDC1_MDCFG3LP: tRC=26cycles,tRCD=8cycles,tRPpb=8cycles,tRPab=9cycles */
MXC_DCD_ITEM(87, MMDC_P0_BASE_ADDR + 0x038, 0x00190778)
/* MMDC1_MDOTC: all fields not relevant on LPDDR2 */
MXC_DCD_ITEM(88, MMDC_P0_BASE_ADDR + 0x008, 0x00000000)
/* MMDC1_MDASP: CS0_END = 0x53 */
MXC_DCD_ITEM(89, MMDC_P0_BASE_ADDR + 0x040, 0x00000053)
/* MMDC1_MDCTL: CS0=enable,CS1=enable,ROW=14,COL=10,BL=4,DataBusSize=32-bit */
MXC_DCD_ITEM(90, MMDC_P0_BASE_ADDR + 0x000, 0x83110000)
/* Channel1 - starting address 0x10000000 */
/* MMDC2_MDCFG0 */
MXC_DCD_ITEM(91, MMDC_P1_BASE_ADDR + 0x00c, 0x34386143)
/* MMDC2_MDPDC */
MXC_DCD_ITEM(92, MMDC_P1_BASE_ADDR + 0x004, 0x00020024)
/* MMDC2_MDCFG1 */
MXC_DCD_ITEM(93, MMDC_P1_BASE_ADDR + 0x010, 0x00100a82)
/* MMDC2_MDCFG2 */
MXC_DCD_ITEM(94, MMDC_P1_BASE_ADDR + 0x014, 0x00000093)
/* MMDC2_MDMISC */
MXC_DCD_ITEM(95, MMDC_P1_BASE_ADDR + 0x018, 0x000016cc)
/* MMDC2_MDRWD */
MXC_DCD_ITEM(96, MMDC_P1_BASE_ADDR + 0x02c, 0x0f9f26d2)
/* MMDC2_MDOR */
MXC_DCD_ITEM(97, MMDC_P1_BASE_ADDR + 0x030, 0x00000210)
/* MMDC2_MDCFG3LP */
MXC_DCD_ITEM(98, MMDC_P1_BASE_ADDR + 0x038, 0x00190778)
/* MMDC2_MDOTC */
MXC_DCD_ITEM(99, MMDC_P1_BASE_ADDR + 0x008, 0x00000000)
/* MMDC2_MDASP: CS0_END = 0x13 */
MXC_DCD_ITEM(100, MMDC_P1_BASE_ADDR + 0x040, 0x00000013)
/* MMDC2_MDCTL */
MXC_DCD_ITEM(101, MMDC_P1_BASE_ADDR + 0x000, 0x83110000)
/* Channel0 : Configure DDR device:*/
/* MRW: BA=0 CS=0 MR_ADDR=63 MR_OP=0                  RESET */
MXC_DCD_ITEM(102, MMDC_P0_BASE_ADDR + 0x01c, 0x003f8030)
/* MRW: BA=0 CS=0 MR_ADDR=10 MR_OP=ff                 Calibration command after init */
MXC_DCD_ITEM(103, MMDC_P0_BASE_ADDR + 0x01c, 0xff0a8030)
/* MRW: BA=0 CS=0 MR_ADDR=1  MR_OP=c2                 nWR=6, BL4 */
MXC_DCD_ITEM(104, MMDC_P0_BASE_ADDR + 0x01c, 0xc2018030)
/* MRW: BA=0 CS=0 MR_ADDR=2  MR_OP=4                  RL6/WL3 */
MXC_DCD_ITEM(105, MMDC_P0_BASE_ADDR + 0x01c, 0x04028030)
/* MRW: BA=0 CS=0 MR_ADDR=3  MR_OP=3                  DriveStregth=48ohm */
MXC_DCD_ITEM(106, MMDC_P0_BASE_ADDR + 0x01c, 0x03038030)
/* Channel1 : Configure DDR device:*/
/* MRW: BA=0 CS=0 MR_ADDR=63 MR_OP=0                  RESET */
MXC_DCD_ITEM(107, MMDC_P1_BASE_ADDR + 0x01c, 0x003f8030)
/* MRW: BA=0 CS=0 MR_ADDR=10 MR_OP=ff                 Calibration command after init */
MXC_DCD_ITEM(108, MMDC_P1_BASE_ADDR + 0x01c, 0xff0a8030)
/* MRW: BA=0 CS=0 MR_ADDR=1  MR_OP=c2                 nWR=6, BL4 */
MXC_DCD_ITEM(109, MMDC_P1_BASE_ADDR + 0x01c, 0xC2018030)
/* MRW: BA=0 CS=0 MR_ADDR=2  MR_OP=4                  RL6/WL3 */
MXC_DCD_ITEM(110, MMDC_P1_BASE_ADDR + 0x01c, 0x04028030)
/* MRW: BA=0 CS=0 MR_ADDR=3  MR_OP=3                  DriveStregth=48ohm */
MXC_DCD_ITEM(111, MMDC_P1_BASE_ADDR + 0x01c, 0x03038030)
/* Final DDR setup, before operation start */
/* MMDC1_MPZQHWCTRL, enable automatic ZQ calibration */
MXC_DCD_ITEM(112, MMDC_P0_BASE_ADDR + 0x800, 0xa1390003)
/* MMDC2_MPZQHWCTRL, enable automatic ZQ calibration */
MXC_DCD_ITEM(113, MMDC_P1_BASE_ADDR + 0x800, 0xa1390003)
/* MMDC1_MDREF: refresh triggered by 32kHz clock, 4 refreshed/cycle */
MXC_DCD_ITEM(114, MMDC_P0_BASE_ADDR + 0x020, 0x00005800)
/* MMDC2_MDREF */
MXC_DCD_ITEM(115, MMDC_P1_BASE_ADDR + 0x020, 0x00005800)
/* MMDC1_MPODTCTRL: clear for LPDDR2 */
MXC_DCD_ITEM(116, MMDC_P0_BASE_ADDR + 0x818, 0x0)
/* MMDC2_MPODTCTRL: clear for LPDDR2 */
MXC_DCD_ITEM(117, MMDC_P1_BASE_ADDR + 0x818, 0x0)
/* MMDC1_MPMUR0, frc_msr */
MXC_DCD_ITEM(118, MMDC_P0_BASE_ADDR + 0x8b8, 0x00000800)
/* MMDC2_MPMUR0, frc_msr */
MXC_DCD_ITEM(119, MMDC_P1_BASE_ADDR + 0x8b8, 0x00000800)
/* MMDC1_MDPDC see spread sheet for timings, SDCTL power down enabled */
MXC_DCD_ITEM(120, MMDC_P0_BASE_ADDR + 0x004, 0x00025564)
/* MMDC2_MDPDC see spread sheet for timings, SDCTL power down enabled */
MXC_DCD_ITEM(121, MMDC_P1_BASE_ADDR + 0x004, 0x00025564)
/* MMDC2_MAPSR ADOPT power down enabled */
MXC_DCD_ITEM(122, MMDC_P0_BASE_ADDR + 0x404, 0x00011006)
/* MMDC2_MAPSR ADOPT power down enabled	*/
MXC_DCD_ITEM(123, MMDC_P1_BASE_ADDR + 0x404, 0x00011006)
/* MMDC1_MDSCR, clear this register (especially the configuration bit as initialization is complete) */
MXC_DCD_ITEM(124, MMDC_P0_BASE_ADDR + 0x01c, 0x00000000)
/* MMDC2_MDSCR, clear this register (especially the configuration bit as initialization is complete) */
MXC_DCD_ITEM(125, MMDC_P1_BASE_ADDR + 0x01c, 0x00000000)
#else  /* i.MX6Q */
dcd_hdr:          .word 0x40a002D2 /* Tag=0xD2, Len=83*8 + 4 + 4, Ver=0x40 */
write_dcd_cmd:    .word 0x049c02CC /* Tag=0xCC, Len=83*8 + 4, Param=0x04 */

/* DCD */


MXC_DCD_ITEM(1, IOMUXC_BASE_ADDR + 0x798, 0x000C0000)
MXC_DCD_ITEM(2, IOMUXC_BASE_ADDR + 0x758, 0x00000000)

MXC_DCD_ITEM(3, IOMUXC_BASE_ADDR + 0x588, 0x00000030)
MXC_DCD_ITEM(4, IOMUXC_BASE_ADDR + 0x594, 0x00000030)

MXC_DCD_ITEM(5, IOMUXC_BASE_ADDR + 0x56c, 0x00000030)
MXC_DCD_ITEM(6, IOMUXC_BASE_ADDR + 0x578, 0x00000030)
MXC_DCD_ITEM(7, IOMUXC_BASE_ADDR + 0x74c, 0x00000030)

MXC_DCD_ITEM(8, IOMUXC_BASE_ADDR + 0x57c, 0x00000030)

MXC_DCD_ITEM(9, IOMUXC_BASE_ADDR + 0x58c, 0x00000000)
MXC_DCD_ITEM(10, IOMUXC_BASE_ADDR + 0x59c, 0x00000030)
MXC_DCD_ITEM(11, IOMUXC_BASE_ADDR + 0x5a0, 0x00000030)
MXC_DCD_ITEM(12, IOMUXC_BASE_ADDR + 0x78c, 0x00000030)

MXC_DCD_ITEM(13, IOMUXC_BASE_ADDR + 0x750, 0x00020000)

MXC_DCD_ITEM(14, IOMUXC_BASE_ADDR + 0x5a8, 0x00000030)
MXC_DCD_ITEM(15, IOMUXC_BASE_ADDR + 0x5b0, 0x00000030)
MXC_DCD_ITEM(16, IOMUXC_BASE_ADDR + 0x524, 0x00000030)
MXC_DCD_ITEM(17, IOMUXC_BASE_ADDR + 0x51c, 0x00000030)
MXC_DCD_ITEM(18, IOMUXC_BASE_ADDR + 0x518, 0x00000030)
MXC_DCD_ITEM(19, IOMUXC_BASE_ADDR + 0x50c, 0x00000030)
MXC_DCD_ITEM(20, IOMUXC_BASE_ADDR + 0x5b8, 0x00000030)
MXC_DCD_ITEM(21, IOMUXC_BASE_ADDR + 0x5c0, 0x00000030)

MXC_DCD_ITEM(22, IOMUXC_BASE_ADDR + 0x774, 0x00020000)

MXC_DCD_ITEM(23, IOMUXC_BASE_ADDR + 0x784, 0x00000030)
MXC_DCD_ITEM(24, IOMUXC_BASE_ADDR + 0x788, 0x00000030)
MXC_DCD_ITEM(25, IOMUXC_BASE_ADDR + 0x794, 0x00000030)
MXC_DCD_ITEM(26, IOMUXC_BASE_ADDR + 0x79c, 0x00000030)
MXC_DCD_ITEM(27, IOMUXC_BASE_ADDR + 0x7a0, 0x00000030)
MXC_DCD_ITEM(28, IOMUXC_BASE_ADDR + 0x7a4, 0x00000030)
MXC_DCD_ITEM(29, IOMUXC_BASE_ADDR + 0x7a8, 0x00000030)
MXC_DCD_ITEM(30, IOMUXC_BASE_ADDR + 0x748, 0x00000030)

MXC_DCD_ITEM(31, IOMUXC_BASE_ADDR + 0x5ac, 0x00000030)
MXC_DCD_ITEM(32, IOMUXC_BASE_ADDR + 0x5b4, 0x00000030)
MXC_DCD_ITEM(33, IOMUXC_BASE_ADDR + 0x528, 0x00000030)
MXC_DCD_ITEM(34, IOMUXC_BASE_ADDR + 0x520, 0x00000030)
MXC_DCD_ITEM(35, IOMUXC_BASE_ADDR + 0x514, 0x00000030)
MXC_DCD_ITEM(36, IOMUXC_BASE_ADDR + 0x510, 0x00000030)
MXC_DCD_ITEM(37, IOMUXC_BASE_ADDR + 0x5bc, 0x00000030)
MXC_DCD_ITEM(38, IOMUXC_BASE_ADDR + 0x5c4, 0x00000030)

MXC_DCD_ITEM(39, MMDC_P0_BASE_ADDR + 0x800, 0xA1390003)

MXC_DCD_ITEM(40, MMDC_P0_BASE_ADDR + 0x80c, 0x001F001F)
MXC_DCD_ITEM(41, MMDC_P0_BASE_ADDR + 0x810, 0x001F001F)
MXC_DCD_ITEM(42, MMDC_P1_BASE_ADDR + 0x80c, 0x001F001F)
MXC_DCD_ITEM(43, MMDC_P1_BASE_ADDR + 0x810, 0x001F001F)

MXC_DCD_ITEM(44, MMDC_P0_BASE_ADDR + 0x83c, 0x4333033F)
MXC_DCD_ITEM(45, MMDC_P0_BASE_ADDR + 0x840, 0x032C031D)
MXC_DCD_ITEM(46, MMDC_P1_BASE_ADDR + 0x83c, 0x43200332)
MXC_DCD_ITEM(47, MMDC_P1_BASE_ADDR + 0x840, 0x031A026A)
MXC_DCD_ITEM(48, MMDC_P0_BASE_ADDR + 0x848, 0x4D464746)
MXC_DCD_ITEM(49, MMDC_P1_BASE_ADDR + 0x848, 0x47453F4D)
MXC_DCD_ITEM(50, MMDC_P0_BASE_ADDR + 0x850, 0x3E434440)
MXC_DCD_ITEM(51, MMDC_P1_BASE_ADDR + 0x850, 0x47384839)

MXC_DCD_ITEM(52, MMDC_P0_BASE_ADDR + 0x81c, 0x33333333)
MXC_DCD_ITEM(53, MMDC_P0_BASE_ADDR + 0x820, 0x33333333)
MXC_DCD_ITEM(54, MMDC_P0_BASE_ADDR + 0x824, 0x33333333)
MXC_DCD_ITEM(55, MMDC_P0_BASE_ADDR + 0x828, 0x33333333)
MXC_DCD_ITEM(56, MMDC_P1_BASE_ADDR + 0x81c, 0x33333333)
MXC_DCD_ITEM(57, MMDC_P1_BASE_ADDR + 0x820, 0x33333333)
MXC_DCD_ITEM(58, MMDC_P1_BASE_ADDR + 0x824, 0x33333333)
MXC_DCD_ITEM(59, MMDC_P1_BASE_ADDR + 0x828, 0x33333333)

MXC_DCD_ITEM(60, MMDC_P0_BASE_ADDR + 0x8b8, 0x00000800)
MXC_DCD_ITEM(61, MMDC_P1_BASE_ADDR + 0x8b8, 0x00000800)

MXC_DCD_ITEM(62, MMDC_P0_BASE_ADDR + 0x004, 0x00020036)
MXC_DCD_ITEM(63, MMDC_P0_BASE_ADDR + 0x008, 0x09444040)
MXC_DCD_ITEM(64, MMDC_P0_BASE_ADDR + 0x00c, 0x555A7975)
MXC_DCD_ITEM(65, MMDC_P0_BASE_ADDR + 0x010, 0xFF538F64)
MXC_DCD_ITEM(66, MMDC_P0_BASE_ADDR + 0x014, 0x01FF00DB)
MXC_DCD_ITEM(67, MMDC_P0_BASE_ADDR + 0x018, 0x00001740)

MXC_DCD_ITEM(68, MMDC_P0_BASE_ADDR + 0x01c, 0x00008000)
MXC_DCD_ITEM(69, MMDC_P0_BASE_ADDR + 0x02c, 0x000026D2)
MXC_DCD_ITEM(70, MMDC_P0_BASE_ADDR + 0x030, 0x005A1023)
MXC_DCD_ITEM(71, MMDC_P0_BASE_ADDR + 0x040, 0x00000027)

MXC_DCD_ITEM(72, MMDC_P0_BASE_ADDR + 0x000, 0x831A0000)

MXC_DCD_ITEM(73, MMDC_P0_BASE_ADDR + 0x01c, 0x04088032)
MXC_DCD_ITEM(74, MMDC_P0_BASE_ADDR + 0x01c, 0x00008033)
MXC_DCD_ITEM(75, MMDC_P0_BASE_ADDR + 0x01c, 0x00048031)
MXC_DCD_ITEM(76, MMDC_P0_BASE_ADDR + 0x01c, 0x09408030)
MXC_DCD_ITEM(77, MMDC_P0_BASE_ADDR + 0x01c, 0x04008040)

MXC_DCD_ITEM(78, MMDC_P0_BASE_ADDR + 0x020, 0x00005800)

MXC_DCD_ITEM(79, MMDC_P0_BASE_ADDR + 0x818, 0x00011117)
MXC_DCD_ITEM(80, MMDC_P1_BASE_ADDR + 0x818, 0x00011117)

MXC_DCD_ITEM(81, MMDC_P0_BASE_ADDR + 0x004, 0x00025576)
MXC_DCD_ITEM(82, MMDC_P0_BASE_ADDR + 0x404, 0x00011006)
MXC_DCD_ITEM(83, MMDC_P0_BASE_ADDR + 0x01c, 0x00000000)

#endif

#endif
